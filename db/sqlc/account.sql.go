// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"

	"github.com/lapeko/udemy__backend-master-class-golang-postgresql-kubernetes/db/utils"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, currency, balance)
VALUES ($1, $2, $3)
RETURNING id, user_id, currency, balance, created_at
`

type CreateAccountParams struct {
	UserID   int64          `json:"user_id"`
	Currency utils.Currency `json:"currency"`
	Balance  int64          `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Currency, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, user_id, currency, balance, created_at
FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountsByIdForUpdate = `-- name: GetAccountsByIdForUpdate :many
SELECT id, user_id, currency, balance, created_at
FROM accounts
WHERE id IN ($1, $2)
ORDER BY id
FOR UPDATE
`

type GetAccountsByIdForUpdateParams struct {
	ID   int64 `json:"id"`
	ID_2 int64 `json:"id_2"`
}

func (q *Queries) GetAccountsByIdForUpdate(ctx context.Context, arg GetAccountsByIdForUpdateParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAccountsByIdForUpdate, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Currency,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, user_id, currency, balance, created_at
FROM accounts
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Currency,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const offsetBalance = `-- name: OffsetBalance :one
UPDATE accounts
SET balance = balance + $2
WHERE id = $1
RETURNING id, user_id, currency, balance, created_at
`

type OffsetBalanceParams struct {
	ID    int64 `json:"id"`
	Delta int64 `json:"delta"`
}

func (q *Queries) OffsetBalance(ctx context.Context, arg OffsetBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, offsetBalance, arg.ID, arg.Delta)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts
SET balance = $2
WHERE id = $1
RETURNING id, user_id, currency, balance, created_at
`

type UpdateAccountBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
