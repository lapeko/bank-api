// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package repository

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (account_from, account_to, amount)
VALUES ($1, $2, $3)
RETURNING id, account_from, account_to, amount, created_at
`

type CreateTransferParams struct {
	AccountFrom int64
	AccountTo   int64
	Amount      int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.AccountFrom, arg.AccountTo, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.AccountFrom,
		&i.AccountTo,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, account_from, account_to, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.AccountFrom,
		&i.AccountTo,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, account_from, account_to, amount, created_at FROM transfers
ORDER BY id LIMIT $1 OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByReceiver = `-- name: ListTransfersByReceiver :many
SELECT id, account_from, account_to, amount, created_at FROM transfers
WHERE account_to = $1
ORDER BY id LIMIT $2 OFFSET $3
`

type ListTransfersByReceiverParams struct {
	AccountTo int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListTransfersByReceiver(ctx context.Context, arg ListTransfersByReceiverParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersByReceiver, arg.AccountTo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersBySender = `-- name: ListTransfersBySender :many
SELECT id, account_from, account_to, amount, created_at FROM transfers
WHERE account_from = $1
ORDER BY id LIMIT $2 OFFSET $3
`

type ListTransfersBySenderParams struct {
	AccountFrom int64
	Limit       int32
	Offset      int32
}

func (q *Queries) ListTransfersBySender(ctx context.Context, arg ListTransfersBySenderParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersBySender, arg.AccountFrom, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersBySenderAndReceiver = `-- name: ListTransfersBySenderAndReceiver :many
SELECT id, account_from, account_to, amount, created_at FROM transfers
WHERE account_to = $1 AND account_from = $2
ORDER BY id LIMIT $3 OFFSET $4
`

type ListTransfersBySenderAndReceiverParams struct {
	AccountTo   int64
	AccountFrom int64
	Limit       int32
	Offset      int32
}

func (q *Queries) ListTransfersBySenderAndReceiver(ctx context.Context, arg ListTransfersBySenderAndReceiverParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersBySenderAndReceiver,
		arg.AccountTo,
		arg.AccountFrom,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
