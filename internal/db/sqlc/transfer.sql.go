// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (account_from, account_to, amount)
VALUES ($1, $2, $3)
RETURNING id, account_from, account_to, amount, created_at
`

type CreateTransferParams struct {
	AccountFrom int64 `json:"account_from"`
	AccountTo   int64 `json:"account_to"`
	Amount      int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer, arg.AccountFrom, arg.AccountTo, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.AccountFrom,
		&i.AccountTo,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalTransfersCount = `-- name: GetTotalTransfersCount :one
SELECT COUNT(*) as total_count
FROM transfers
`

func (q *Queries) GetTotalTransfersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalTransfersCount)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const getTotalTransfersCountByAccount = `-- name: GetTotalTransfersCountByAccount :one
SELECT COUNT(*) as total_count
FROM transfers
WHERE account_from = $1 OR account_to = $1
`

func (q *Queries) GetTotalTransfersCountByAccount(ctx context.Context, accountID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalTransfersCountByAccount, accountID)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, account_from, account_to, amount, created_at
FROM transfers
LIMIT $1
OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByAccount = `-- name: ListTransfersByAccount :many
SELECT id, account_from, account_to, amount, created_at
FROM transfers
WHERE account_from = $3 OR account_to = $3
LIMIT $1
OFFSET $2
`

type ListTransfersByAccountParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) ListTransfersByAccount(ctx context.Context, arg ListTransfersByAccountParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfersByAccount, arg.Limit, arg.Offset, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.AccountFrom,
			&i.AccountTo,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
